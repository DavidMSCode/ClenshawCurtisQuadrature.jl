var documenterSearchIndex = {"docs":
[{"location":"#ClenshawCurtisQuadrature.jl-Documentation","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"","category":"section"},{"location":"#Summary","page":"ClenshawCurtisQuadrature.jl Documentation","title":"Summary","text":"","category":"section"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"ClenshawCurtisQuadrature.jl is a Julia package that provides tools for performing Clenshaw-Curtis quadrature, a numerical integration technique. This method is particularly useful for quickly integrating arbitrary functions with high accuracy. The package aims to offer efficient and easy-to-use functions for integration tasks.","category":"page"},{"location":"#Installation","page":"ClenshawCurtisQuadrature.jl Documentation","title":"Installation","text":"","category":"section"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"ClenshawCurtisQuadrature.jl is currently in development and not included in any package registries. Users will need to manually add the package with this Github repository url","category":"page"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"julia> Using Pkg; Pkg.add(url=\"https://github.com/DavidMSCode/ClenshawCurtisQuadrature.jl\")","category":"page"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"or enter the package manager with ","category":"page"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"julia> ]","category":"page"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"and run","category":"page"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"(@environment) pkg> add https://github.com/DavidMSCode/ClenshawCurtisQuadrature.jl","category":"page"},{"location":"#Usage","page":"ClenshawCurtisQuadrature.jl Documentation","title":"Usage","text":"","category":"section"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"The purpose of this module is to numerically solve integrals of the form","category":"page"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"F(tau) = F(-1) + int_-1^tauf(xi)dxi","category":"page"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"note: Note\nIf F(tau) is an antiderivative of f(tau), then F(tau)+c is also an antiderivative of f(tau) for any constant value c. But, if F(-1) is known, then there is only one antiderivative that satisfies the integral.","category":"page"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"where f(tau) is an integrand that is valid on the domain -11 and F(tau) is an antiderivative of the integrand. This is performed by representing F(tau) and f(tau) as a summation of Chebyshev polynomials on the domain -11","category":"page"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"F(tau) approx sum_n=0^N alpha_n T_n(tau)","category":"page"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"f(tau) approx sum_n=0^N-1 a_n T_n(tau)","category":"page"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"where T_n(tau) is the n-th Chebyshev polynomial of the first kind. N is the degree of the interpolating polynomial and a_n and alpha_n are the interpolating coefficients of the integrand and the particular antiderivative respectively. Because the integrals of the Chebyshev polynomials are related the values of Chebyshev polynomials of higher and lower degrees, we can perform linear operations on the integrand's coefficients to calculate the corresponding antiderivative's coefficients. The functions in this module are designed to generate the matrices required for this quadrature.","category":"page"},{"location":"#Examples","page":"ClenshawCurtisQuadrature.jl Documentation","title":"Examples","text":"","category":"section"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"If we want to know the integral on the domain -11 of the function f(tau)=tau^2, we can do so by first sampling the function at set of M+1 points. Because we know the antiderivative of f(tau) is a 3rd order polynomial, I'll choose N=3 as our desired interpolating polynomial of the solution. We can sample as many points as we want, but because the integrand will be represented as a 2nd order polynomial we need at least 3 points to calculate the coefficients.","category":"page"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"To do so first generate the values of tau at cosine spaced nodes.","category":"page"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"note: Note\nBecause we just wanted the value of the integral on the range -11  we assume that F(-1)=0. The next examples will demonstrating solving an initial value problem when F(-1)neq 0.The Ta and T1 matrices returned by clenshaw_curtis_ivpi() are also interpolating matrices. They specifically contain the values of the chebyshev polynomials needed to interpolate the integrand and antiderivative at each of the M+1 cosine spaced nodes we calculated before. Pre-calculating these matrices can be useful for iterative problems where the integrand is unkown as a function of tau.","category":"page"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"using ClenshawCurtisQuadrature\n\n#set the degree variables\nM = 2\nN = 3\n\n#Generate the cosine spaced nodes\nMs = 0:M\ntaus = cos.(pi*Ms/M)\n\n#Sample the integrand\nf = (x) -> x^2\nys = f.(taus)\n\n#Get the Least Squares Operation and Quadrature matrix\nA,Ta,P1,T1 = clenshaw_curtis_ivpi(N,M)\n\n#Calculate the least squares fit interpolating polynomial coefficients\na = A*ys\n\n#Apply the quadrature matrix\nalpha = P1*a\n\n#Get the interpolating polynomials at τ=1\nT = interpolate(1,N)\n\nF1 = T*alpha\n\n# output\n\n1-element Vector{Float64}:\n 0.6666666666666666","category":"page"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"The result is that int_-1^1 tau^2dtau=frac23 which is exactly the correct answer.","category":"page"},{"location":"#Methods","page":"ClenshawCurtisQuadrature.jl Documentation","title":"Methods","text":"","category":"section"},{"location":"","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.jl Documentation","text":"interpolate(taus::AbstractVector{<:Real}, N::Integer; recursive::Bool = false)\nclenshaw_curtis_nested_ivpd(N::Integer, M::Integer, d::Integer)\nclenshaw_curtis_ivpi(N::Integer, M::Integer)\nclenshaw_curtis_ivpii(N::Integer, M::Integer)","category":"page"},{"location":"#ClenshawCurtisQuadrature.interpolate-Tuple{AbstractVector{<:Real}, Integer}","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.interpolate","text":"interpolate(τs::AbstractVector{<:Real}, N::Integer; recursive::Bool = false)\n\nComputes a matrix of Chebyshev polynomials of the first kind T_n(τ) for  τ  τs and n = 01N. Used with Chebyshev coefficients to  calculate the value of the interpolating polynomials at the given values of  τ.\n\nArguments\n\nτs::AbstractVector{<:Real}: The points at which to evaluate the Chebyshev\n\npolynomials.\n\nN::Integer: The polynomial degree.\nrecursive::Bool: If true, use the recursive formula to compute the\n\nChebyshev polynomials within the domain [-1,1]. If false, use the trigonometric formulation. Default is false.\n\nReturns\n\nTs: A matrix of Chebyshev polynomial values at the given values of τ.\n\n\n\n\n\n","category":"method"},{"location":"#ClenshawCurtisQuadrature.clenshaw_curtis_nested_ivpd-Tuple{Integer, Integer, Integer}","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.clenshaw_curtis_nested_ivpd","text":"clenshaw_curtis_nested_ivpd(d::Integer, N::Integer, M::Integer=N)\n\nCompute the Clenshaw-Curtis quadrature and Chebyshev basis function matrices for an Nth degree polynomial and for a d-th order integral on the interval [-1,1].\n\nArguments\n\nd::Integer: The integral order.\nN::Integer: The polynomial degree.\nM::Integer: The sampling degree. Must be greater than or equal to the\n\npolynomial degree. The integrand is evaluated at M+1 cosine spaced nodes. Defaults to N.\n\nReturns\n\nA: The Least Squares Operator matrix.\nP: The Quadrature Matrix.\nT: The Chebyshev Matrix.\n\n\n\n\n\n","category":"method"},{"location":"#ClenshawCurtisQuadrature.clenshaw_curtis_ivpi-Tuple{Integer, Integer}","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.clenshaw_curtis_ivpi","text":"clenshaw_curtis_ivpi(N::Integer, M::Integer=N)\n\nCompute the Clenshaw-Curtis quadrature and Cebyshev basis function matrices for a first order initial value problem on the interval [-1,1].\n\nArguments\n\nN::Integer: The polynomial degree.\nM::Integer: The sampling degree. Must bes greater than or equal to the\n\npolynomial degree. This is equal to the total number of function sampling points minus 1. Defaults to N.\n\nReturns\n\nA: The Least Squares Operator matrix.\nTa: The \"acceleration\" Chebyshev Matrix.\nP1: The Quadrature Matrix for acceleration to velocity.\nT1: The \"Velocity\" Chebyshev Matrix.\n\n\n\n\n\n","category":"method"},{"location":"#ClenshawCurtisQuadrature.clenshaw_curtis_ivpii-Tuple{Integer, Integer}","page":"ClenshawCurtisQuadrature.jl Documentation","title":"ClenshawCurtisQuadrature.clenshaw_curtis_ivpii","text":"clenshaw_curtis_ivpii(N::Integer, M::Integer=N)\n\nCompute the Clenshaw-Curtis quadrature and Cebyshev basis function matrices for a second order initial value problem on the interval [-1,1].\n\nArguments\n\nN::Integer: The polynomial degree.\nM::Integer: The sampling degree. Must bes greater than or equal to the\n\npolynomial degree. This is equal to the total number of function sampling points minus 1. Defaults to N.\n\nReturns\n\nA: The Least Squares Operator matrix.\nTa: The \"acceleration\" Chebyshev Matrix.\nP1: The Quadrature Matrix for acceleration to velocity.\nT1: The \"Velocity\" Chebyshev Matrix.\nP2: The Quadrature Matrix for velocity to position.\nT2: The \"Position\" Chebyshev Matrix.\n\nExample\n\nN = 5\nM = 5\nA, Ta, P1, T1, P2, T2 = clenshaw_curtis_ivpii(N, M)\n\n\n\n\n\n","category":"method"}]
}
